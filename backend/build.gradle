buildscript {
    ext {
        springBootVersion = '2.6.4'
        lombokVersion = '1.18.22'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.owasp:dependency-check-gradle:5.3.2.1'
    }
}

// keep alphabetical order in groups
plugins {
    // 3rd party
    id "com.github.ben-manes.versions" version "0.28.0"
    id "com.github.spotbugs" version "5.0.6"
    id "com.gorylenko.gradle-git-properties" version "2.4.0"
    id 'de.aaschmid.cpd' version '3.3'
    id 'io.spring.dependency-management' version "1.0.9.RELEASE"
    id 'org.owasp.dependencycheck' version '5.3.2.1'
    id 'org.springframework.boot' version '2.2.6.RELEASE'

    // core
    id 'checkstyle'
    id 'idea'
    id "jacoco"
    id 'java'
    id 'pmd'
    id 'project-report'
}

version '1.0'

sourceCompatibility = 1.17

repositories {
    mavenCentral()
}

// keep alphabetical order in groups
dependencies {
    testImplementation 'io.rest-assured:rest-assured:4.2.0'
    testImplementation 'io.rest-assured:xml-path:4.2.0'
    testImplementation 'io.rest-assured:json-path:4.2.0'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.3.3'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit' // excluding JUnit4
        exclude group: 'org.assertj' // to avoid confusion in imports (e.g. assertThat)
        exclude group: 'org.junit.vintage' // to avoid warning when running tests in IJ
    }

    implementation 'com.google.code.findbugs:annotations:3.0.1'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation "org.flywaydb:flyway-core:6.4.1"
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.security:spring-security-crypto'

    runtimeOnly 'com.h2database:h2:1.4.200'
    runtimeOnly 'org.postgresql:postgresql:42.2.12'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'

    //Lombok
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
}

pmdMain {
    ruleSetFiles = files("config/main-pmd-ruleset.xml")
    ruleSets = []
}

pmdTest {
    ruleSetFiles = files("config/test-pmd-ruleset.xml")
    ruleSets = []
}

jacoco {
    toolVersion = "0.8.7"
}

spotbugs {
    toolVersion = '4.6.0'
    excludeFilter = file("config/spotbugs-exclude.xml")
}

// TODO  - spotbugs reports syntax warnings  in  IJ - verify  how it  should be  properly configured
spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

//  workaround for warning about classes missing in analysis
spotbugsTest {
    auxClassPaths += sourceSets.main.output
}

checkstyle {
    configFile file('config/checkstyle.xml')
    toolVersion '8.32'
    showViolations = true
    ignoreFailures = false
    maxWarnings = 0
    maxErrors = 0
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 1.00
            }
        }
        rule {
            limit {
                counter = 'LINE'
                minimum = 1.00
            }
        }
        rule {
            limit {
                counter = 'CLASS'
                minimum = 1.00
            }
        }
        rule {
            limit {
                counter = 'METHOD'
                minimum = 1.00
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-processing" << "-Werror"
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

cpdCheck {
    source = sourceSets.main.allJava // only java, groovy and scala classes in 'main' sourceSets
    minimumTokenCount = 90
    ignoreAnnotations = true
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "UTC"
}
